/*
Bicycle is a framework for managing data.

Copyright (C) 2024 Ordinary Labs

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

syntax = "proto3";
package bicycle.runtime.javascript;

// TODO: use the Value type, but figure out an ergonomic 
// TODO: way to still pass between JS and Rust
// TODO: will probably just need to package the Value serde
// TODO: js code into the Deno runtime and use that instead of
// TODO: the JSON.stringify(JSON.parse()) B.S.

// import "google/protobuf/struct.proto";

message Empty {}

message Name {
  string name = 1;
}

message Script {
  string name = 1;
  string script = 2;
}

message Scripts {
  repeated Script scripts = 1;
}

message OneOff {
  string script = 1;
  string args = 2;
  // google.protobuf.Value args = 2;
}

message Stored {
  string name = 1;
  string args = 2;
  // google.protobuf.Value args = 2;
}

message Json {
  string json = 1;
}

service Runtime {
  rpc Del(Name) returns (Empty) {}
  rpc Put(Script) returns (Empty) {}

  rpc List(Empty) returns (Scripts) {}

  rpc RunOneOff(OneOff) returns (Json) {}
  rpc RunStored(Stored) returns (Json) {}
  // rpc RunOneOff(OneOff) returns (google.protobuf.Value) {}
  // rpc RunStored(Stored) returns (google.protobuf.Value) {}
}
